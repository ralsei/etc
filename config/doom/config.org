#+TITLE:   Hazel's DOOM Emacs configuration
#+AUTHOR:  Hazel Levine
#+EMAIL:   rose.hazel@protonmail.ch
#+STARTUP: nofold

Whee, literate programming, whoo. I get to type words here. These are words on a
screen. Typing. With /haaaaaaands/.

In this file, we tangle the following:
#+BEGIN_SRC emacs-lisp
;;; config.el -*- lexical-binding: t -*-
#+END_SRC
#+BEGIN_SRC emacs-lisp :tangle ~/.config/doom/packages.el
;;; packages.el -*- lexical-binding: t -*-
#+END_SRC

Any calls to =package!= generally get tangled to =packages.el=, whereas
everything else goes to =config.el=.

* Introduction
** =whoami=
I'm a bunny.
#+BEGIN_SRC emacs-lisp
(setq user-full-name "Hazel Levine"
      user-mail-address "hazel@knightsofthelambdacalcul.us")
#+END_SRC
* UI
** Fonts
I've had font rendering issues with Emacs for /years/, ever since I picked it
up. Namely, Emacs' font always looked just different enough from that of
whatever terminal emulator I'm using to be annoying. Thankfully, [[https://github.com/rocx/.emacs.d][rocx's emacs
config]] held the solution by forcing Emacs to use XFT.

I first define a function to create an XFT font string from whatever font, size,
and options I want:
#+BEGIN_SRC emacs-lisp
(defun hzl/xft-font-string (name size &optional properties)
  ;; https://keithp.com/~keithp/render/Xft.tutorial
  (concat (format "%s-%d" name size)
          (when properties
            (apply #'concat (mapcar (lambda (prop)
                                      (format ":%s=%s" (car prop) (cdr prop)))
                                    properties)))))
#+END_SRC

I'm playing with the [[https://www.ibm.com/plex/][IBM Plex]] font right now. I like it a lot, but my font of
choice has been known to change.
#+BEGIN_SRC emacs-lisp
(defvar hzl/monospace-font
  (hzl/xft-font-string "IBM Plex Mono" 10
                       '((hintstyle . 3)
                         (hinting . true)
                         (lcdfilter . 3)
                         (antialias . true))))
(defvar hzl/variable-pitch-font
  (hzl/xft-font-string "IBM Plex Sans" 10
                       '((hintstyle . 3)
                         (autohint . true)
                         (lcdfilter . 3)
                         (antialias . true))))

(setq doom-font hzl/monospace-font)
(setq doom-variable-pitch-font hzl/variable-pitch-font)
#+END_SRC
** Colorscheme
I've been using [[https://github.com/morhetz/gruvbox][Gruvbox]] Light recently. After years and years of dark themes, I
came to the realization that:
+ Anti-aliasing algorithms were better with black text on a white background
+ I can read light themes without glasses
+ "Burning your eyes" is not a thing that actually happens
#+BEGIN_SRC emacs-lisp
(setq doom-theme 'doom-gruvbox-light)
#+END_SRC
** Everything else
Enable line numbers, because those are nice, and make 'em relative:
#+BEGIN_SRC emacs-lisp
(setq display-line-numbers-type 'relative)
#+END_SRC

Set the startup screen image to something comfy:
#+BEGIN_SRC emacs-lisp
(setq fancy-splash-image (concat doom-private-dir "nice.png"))
#+END_SRC
* Functionality
For the most part, DOOM Emacs handles 99% of the things I want to do in a text
editor and more, which is why this section is pretty brief.
Pretty much all of the functions I write end up under the "namespace"
=hzl/whatever=, on the merit that I want to avoid any clashes anywhere.
** MPDel music player
I usually use =ncmpcpp= for music, but sometimes when I'm working I use this.
It's all MPD, so it's not like they conflict.

We grab both MPDel and its Ivy interface:
#+BEGIN_SRC emacs-lisp :tangle ~/.config/doom/packages.el
(package! mpdel)
(package! ivy-mpdel)
#+END_SRC

We also disable evil in MPDel because its keybindings are contingent on doing
so.
#+BEGIN_SRC emacs-lisp
(use-package! mpdel
  :config
  (mpdel-mode)
  (set-evil-initial-state! '(mpdel-playlist-mode
                             mpdel-browser-mode
                             mpdel-song-mode
                             mpdel-tablist-mode)
    'emacs))
#+END_SRC
* Productivity, papers, etc
For the boring stuff that's not /quite/ programming.
** TeXcount
This is a binding to a Perl script installed via =tlmgr= that... counts words.
Considering most of the papers I write have hard minimum/maximum limits, this
comes in pretty useful pretty often.
#+BEGIN_SRC emacs-lisp
(defun hzl/texcount ()
  ;; Counts words in a TeX file.
  (interactive)
  (let*
      ((this-file (buffer-file-name))
       (enc-str (symbol-name buffer-file-coding-system))
       (enc-opt
        (cond
         ((string-match "utf-8" enc-str) "-utf8")
         ((string-match "latin" enc-str) "-latin1")
         ("-encoding=guess")))
       (word-count
        (with-output-to-string
          (with-current-buffer standard-output
            (call-process "texcount" nil t nil "-0" enc-opt this-file)))))
    (message word-count)))
#+END_SRC

...and then, actually bind it to =C-c w= in LaTeX mode.
#+BEGIN_SRC emacs-lisp
(add-hook 'LaTeX-mode-hook (lambda () (define-key LaTeX-mode-map "\C-cw" 'hzl/texcount)))
#+END_SRC
** AucTeX =latexmk=
I use =latexmk= to build my LaTeX work because I use external files for my
bibliographies.
#+BEGIN_SRC emacs-lisp :tangle ~/.config/doom/packages.el
(package! auctex-latexmk)
#+END_SRC

We tell it to run the auto-setup function and use PDFs:
#+BEGIN_SRC emacs-lisp
(use-package! auctex-latexmk
  :config
  (auctex-latexmk-setup)
  (setq auctex-latexmk-inherit-TeX-pdf-mode t))
#+END_SRC
** =mu4e=
/NOTE: This is not working right now and I am using Thunderbird./

I have two email accounts: my ProtonMail account (linked to my deadname) and my
personal mailserver.

Tell =mu4e= to use =offlineimap=. =mbsync= doesn't behave with [[https://github.com/emersion/hydroxide/][Hydroxide]].
#+BEGIN_SRC emacs-lisp
(setq +mu4e-backend 'offlineimap)
#+END_SRC

Tell it where I save my mail:
#+BEGIN_SRC emacs-lisp
(setq mu4e-maildir "/home/hazel/var/mail/"
      mu4e-attachment-dir "/home/hazel/var/mail/attachments")
#+END_SRC

Set a few QoL fixes, because mu4e's default viewer kinda sucks:
#+BEGIN_SRC emacs-lisp
(setq mu4e-view-use-gnus t)

(when (fboundp 'imagemagick-register-types)
  (imagemagick-register-types))
#+END_SRC

We tell it how I save my email, too:
#+BEGIN_SRC emacs-lisp
(set-email-account! "Knights of the Lambda Calculus"
                    '((mu4e-sent-folder      . "/lambdamail/Sent")
                      (mu4e-drafts-folder    . "/lambdamail/Drafts")
                      (mu4e-trash-folder     . "/lambdamail/Junk")
                      (mu4e-refile-folder    . "/lambdamail/All Mail")
                      (smtpmail-smtp-user    . "hazel@knightsofthelambdacalcul.us")
                      (user-mail-address     . "hazel@knightsofthelambdacalcul.us"))
                    t)
(set-email-account! "ProtonMail"
                    '((mu4e-sent-folder      . "/protonmail/Sent")
                      (mu4e-drafts-folder    . "/protonmail/Drafts")
                      (mu4e-trash-folder     . "/protonmail/Trash")
                      (mu4e-refile-folder    . "/protonmail/All Mail")
                      (smtpmail-smtp-user    . "me@qtp2t.club")
                      (smtpmail-smtp-service . 1025)
                      (smtpmail-stream-type  . nil)
                      (user-mail-address     . "me@qtp2t.club"))
                    t)
#+END_SRC
** Org-mode
Set the bullets to pretty stuff:
#+BEGIN_SRC emacs-lisp
(setq org-bullets-bullet-list '("☯" "☰" "☱" "☲" "☳" "☴" "☵" "☶" "☷"))
(setq org-ellipsis "↝")
#+END_SRC

Make sure that Org doesn't try to clutter my home directory, and put stuff where
it's supposed to be:
#+BEGIN_SRC emacs-lisp
(setq org-directory "~/usr/doc/org/")
#+END_SRC

Set DOOM's scratch buffer, available at any point with =SPC x=, to Org, which I
find useful for taking quick notes:
#+BEGIN_SRC emacs-lisp
(setq doom-scratch-buffer-major-mode 'org-mode)
#+END_SRC
** PDF Tools
While editing LaTeX documents, this is my PDF viewer of choice. Otherwise, I use
Zathura.
#+BEGIN_SRC emacs-lisp
(setq TeX-view-program-selection '((output-pdf "PDF Tools")))
(add-hook 'TeX-after-compilation-finished-functions #'TeX-revert-document-buffer)
#+END_SRC
* Programming languages
The cool stuff. Unless it's Java.
** FRC Mode
This is a =gradlew= wrapper I hacked together really fast while sitting in my
physics class not paying attention. The officially sanctioned IDE for FIRST
Robotics is Visual Studio Code, which I hate with a burning passion for numerous
reasons.

Note that I'm no longer a FRC student, so if this ever goes out of date, sucks.
I'm planning on mentoring though, so it probably won't.

We grab it directly from my Git, since it's not in ELPA (and probably never will
be):
#+BEGIN_SRC emacs-lisp :tangle ~/.config/doom/packages.el
(package! frc-mode
  :recipe (:host nil :repo "https://git.knightsofthelambdacalcul.us/hazel/frc-mode"))
#+END_SRC

And tell it to run with all Java files. I'd never willingly write Java outside
of FRC, so it's fine.
#+BEGIN_SRC emacs-lisp
(use-package! frc-mode
  :hook (java-mode . frc-mode))
#+END_SRC
** =rust-analyzer=
I have tons of issues with RLS -- it just does NOT behave. While I have to pull
=rust-analyzer= from unstable nixpkgs, and it's marked as unstable all over the
place, it's /still/ miles ahead of RLS.
#+BEGIN_SRC emacs-lisp
(after! rustic
  (setq rustic-lsp-server 'rust-analyzer))
#+END_SRC
** Shen
A really cool experimental, portable, and typed Lisp. I like it a lot, but I
don't know much about it on the merit that it's locked behind a paywall of a
book that I can't afford nor pirate.
#+BEGIN_SRC emacs-lisp :tangle ~/.config/doom/packages.el
(package! shen-mode)
#+END_SRC

Also load the mode for Qi, Shen's predecessor that I actually have the book
for:
#+BEGIN_SRC emacs-lisp
(load-file (concat (getenv "XDG_CONFIG_HOME") "/doom/lisp/qi-mode.el"))
#+END_SRC
